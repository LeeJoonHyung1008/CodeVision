;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <mega128.h>
;#include "switch.h"
;#include "LED.h"
;#include <delay.h>
;
;char switch1;
;char switch2;
;int i =0;
;int j =0;
;int count_SW = 0;
;int flag = 1;
;
;void InitializeSwitch(void)
; 0000 000F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0010 // 스위치 PORTD 0,1
; 0000 0011 // External Interrupt(s) initialization
; 0000 0012 // INT0: On
; 0000 0013 // INT0 Mode: Low level
; 0000 0014 // INT1: On
; 0000 0015 // INT1 Mode: Falling Edge
; 0000 0016 // INT2: Off
; 0000 0017 // INT3: Off
; 0000 0018 // INT4: Off
; 0000 0019 // INT5: Off
; 0000 001A // INT6: Off
; 0000 001B // INT7: Off
; 0000 001C EICRA=0x0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 001D EICRB=0x00;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001E EIMSK=0x03;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 001F EIFR=0x03;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0020 #asm("sei")
;PCODE: $00000017 VOL: 0
	sei
;PCODE: $00000018 VOL: 0
; 0000 0021 }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;/*
;// Declare your global variables here
;     struct Buttons{
;          char SW1;
;          char SW2;
;          } ;
;  Buttons Button;
;*/
;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 002F {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0030 // Place your code here
; 0000 0031     if(EICRA == 0x0A)   // 둘다 falling edge
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0032     {
; 0000 0033         flag = 0;
;PCODE: $00000020 VOL: 0
; 0000 0034         EICRA = 0x09;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0035     }
; 0000 0036     else if(EICRA == 0x09)  // SW1 lowlevel
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0037     {
; 0000 0038         flag = 1;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0039         EICRA = 0x0A;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003A     }
; 0000 003B //     switch1 = TRUE;
; 0000 003C //     count_SW++;
; 0000 003D }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0041 {
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0042 // Place your code here
; 0000 0043      switch2 = TRUE;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0044 }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;
;char SW1(void)
; 0000 0047 {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0048      char ret;
; 0000 0049 
; 0000 004A      ret = switch1;
;PCODE: $0000003A VOL: 0
;	ret -> R17
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004B      switch1 = FALSE;
;PCODE: $0000003D VOL: 0
; 0000 004C 
; 0000 004D      return ret;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 004E }
;PCODE: $00000041 VOL: 0
;
;char SW2(void)
; 0000 0051 {
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0052      char ret;
; 0000 0053 
; 0000 0054      ret = switch2;
;PCODE: $00000044 VOL: 0
;	ret -> R17
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0055      switch2 = FALSE;
;PCODE: $00000047 VOL: 0
; 0000 0056 
; 0000 0057      return ret;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0058 }
;PCODE: $0000004B VOL: 0
;
;void main(void)
; 0000 005B {
;PCODE: $0000004C VOL: 0
; 0000 005C // Declare your local variables here
; 0000 005D 
; 0000 005E      InitializeSwitch();
;PCODE: $0000004D VOL: 0
; 0000 005F      InitializeLED();
;PCODE: $0000004E VOL: 0
; 0000 0060 
; 0000 0061      switch1 = TRUE;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0062      switch2 = FALSE;
;PCODE: $00000051 VOL: 0
; 0000 0063 
; 0000 0064 // Global enable interrupts
; 0000 0065 #asm("sei")
;PCODE: $00000052 VOL: 0
	sei
;PCODE: $00000053 VOL: 0
; 0000 0066 
; 0000 0067 while (1)
;PCODE: $00000054 VOL: 0
; 0000 0068       {                   // 누르면 True, 안누르면 False ,,
; 0000 0069      while(flag == 0)
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 006A      {
; 0000 006B         PORTF=~(0x10<<j);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 006C         delay_ms(1000);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 006D         j++;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 006E         if(j >3)
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 006F         {
; 0000 0070             j = j%4;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0071         }
; 0000 0072         PORTF = 0xFF;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0073         if(flag == 1)
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0074         break;
;PCODE: $00000070 VOL: 0
; 0000 0075     }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0076     PORTF=~(0x10<<(j-1));
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0077     if(SW2() == TRUE)
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0078     {
; 0000 0079         PORTF = 0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 007A         j = 0;
;PCODE: $0000007F VOL: 0
; 0000 007B     }
; 0000 007C 
; 0000 007D     }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 007E //    PORTF = 0xFF;
; 0000 007F }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
