;#include <math.h>
;#include "StepMotor.h"
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;char switch1; // 새롭게 선언한 switch1, switch2입니다. (boolean 변수)
;char switch2;
;int i = 0; // for문에서 밝기 제어를 담당할 변수 I, j 입니다.
;int j = 0;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 000D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000E // Place your code here
; 0000 000F  switch1 = TRUE; // 해당 Interrupt가 호출되면 switch1의 boolean 값을 TRUE로 바
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0010 }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void) //
; 0000 0013 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0014 // Place your code here
; 0000 0015  switch2 = TRUE; // 해당 Interrupt가 호출되면 switch2의 boolean 값을 TRUE로 바
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0016 }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;void InitializeSwitch(void) // Switch 관련 레지스터를 설정하는 함수입니다.
; 0000 0019 {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001A // 스위치 PORTD 0,1
; 0000 001B  PORTD &= 0xfc;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 001C  DDRD &= 0xfc;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 001D // External Interrupt(s) initialization
; 0000 001E // INT0: On
; 0000 001F // INT0 Mode: Falling Edge
; 0000 0020 // INT1: On
; 0000 0021 // INT1 Mode: Falling Edge
; 0000 0022 // INT2: Off
; 0000 0023 // INT3: Off
; 0000 0024 // INT4: Off
; 0000 0025 // INT5: Off
; 0000 0026 // INT6: Off
; 0000 0027 // INT7: Off
; 0000 0028  EICRA=0x0A; // SW1, 2에 대해 모두 Falling Edge로 선언합니다.
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0029  EICRB=0x00; // 아무런 Interrupt를 사용하지 않습니다.
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002A  EIMSK=0x03; // INT0, 1을 Enable 해줍니다.
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 002B  EIFR=0x03; // INT0, 1을 Enable 해줍니다.
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002C  }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;char SW1(void) // SW1에 대한 함수입니다. {
; 0000 002E  {
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 002F  char ret; // return 해줄 변수를 새롭게 선언합니다.
; 0000 0030 
; 0000 0031  ret = switch1; // switch1의 현재 값과 바꿉니다.
;PCODE: $0000002F VOL: 0
;	ret -> R17
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0032  switch1 = FALSE; // switch1에 FALSE 값을 넣습니다.
;PCODE: $00000032 VOL: 0
; 0000 0033 
; 0000 0034  return ret; // ret를 반환합니다.
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0035  }
;PCODE: $00000036 VOL: 0
;char SW2(void) // SW2에 대한 함수입니다. {
; 0000 0037  {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0038  char ret; // return 해줄 변수를 새롭게 선언합니다.
; 0000 0039 
; 0000 003A  ret = switch2; // switch2의 현재 값과 바꿉니다.
;PCODE: $00000039 VOL: 0
;	ret -> R17
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003B  switch2 = FALSE; // switch2에 FALSE 값을 넣습니다.
;PCODE: $0000003C VOL: 0
; 0000 003C 
; 0000 003D  return ret; // ret를 반환합니다.
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 003E  }
;PCODE: $00000040 VOL: 0
;
;// Declare your global variables here
;     char rotateR[8] = {0b1001,0b0001,0b0101,0b0100,0b0110,0b0010,0b1010,0b1000};

	.DSEG
;     char rotateL[8] = {0b1001,0b1000,0b1010,0b0010,0b0110,0b0100,0b0101,0b0001};
;     int LeftstepCount, RightstepCount;        // rotateR과 rotateL의 각각 스텝이 모터에 순서대로 입력되도록 Count
;     unsigned int VelocityLeftmotorTCNT1, VelocityRightmotorTCNT3;    // 왼쪽과 오른쪽 모터의 TCNT 속도
;     unsigned char direction_control;        // 인터럽트 루틴에 방향정보를 전달하기 위한 전역변수
;
;     struct {
;          int nStep4perBlock;            // 한 블록 이동시 필요한 모터회전 스텝 정보
;          int nStep4Turn90forRight;            // 90도 턴 이동시 필요한 모터회전 스텝 정보
;          int nStep4Turn90forLeft;
;     } Information;
;     struct {
;          char LmotorRun;            // 왼쪽 모터가 회전했는지에 대한 Flag
;          char RmotorRun;			// 오른쪽 모터가 회전했는지에 대한 Flag
;     } Flag;
;
;void Direction(int mode)
; 0000 0052 {

	.CSEG
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0053      int LStepCount = 0, RStepCount = 0;
; 0000 0054 
; 0000 0055      TCCR1B = 0x04;
;PCODE: $00000043 VOL: 0
;	mode -> Y+4
;	LStepCount -> R16,R17
;	RStepCount -> R18,R19
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0056      TCCR3B = 0x04;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0057 
; 0000 0058      direction_control = mode;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0059 
; 0000 005A      Flag.LmotorRun = FALSE;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 005B      Flag.RmotorRun = FALSE;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005C 
; 0000 005D      switch(mode)
;PCODE: $00000053 VOL: 0
; 0000 005E      {
; 0000 005F      case FORWARD:
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0060           while(LStepCount<Information.nStep4perBlock || RStepCount<Information.nStep4perBlock)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0061           {
; 0000 0062                if(Flag.LmotorRun)
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0063                {
; 0000 0064                     LStepCount++;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0065                     Flag.LmotorRun = FALSE;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0066                }
; 0000 0067                if(Flag.RmotorRun)
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0068                {
; 0000 0069                     RStepCount++;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 006A                     Flag.RmotorRun = FALSE;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 006B                }
; 0000 006C           }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 006D           break;
;PCODE: $00000073 VOL: 0
; 0000 006E      case HALF:
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 006F           while(LStepCount<(Information.nStep4perBlock>>1) || RStepCount<(Information.nStep4perBlock>>1))
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0070           {
; 0000 0071                if(Flag.LmotorRun)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0072                {
; 0000 0073                     LStepCount++;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0074                     Flag.LmotorRun = FALSE;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0075                }
; 0000 0076                if(Flag.RmotorRun)
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0077                {
; 0000 0078                     RStepCount++;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0079                     Flag.RmotorRun = FALSE;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 007A                }
; 0000 007B           }
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 007C           break;
;PCODE: $00000094 VOL: 0
; 0000 007D      case LEFT:
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 007E      case RIGHT:
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 007F           while(LStepCount<Information.nStep4Turn90forLeft || RStepCount<Information.nStep4Turn90forRight)
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0080           {
; 0000 0081                if(Flag.LmotorRun)
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0082                {
; 0000 0083                     LStepCount++;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0084                     Flag.LmotorRun = FALSE;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0085                }
; 0000 0086                if(Flag.RmotorRun)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0087                {
; 0000 0088                     RStepCount++;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0089                     Flag.RmotorRun = FALSE;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 008A                }
; 0000 008B           }
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 008C           break;
;PCODE: $000000BC VOL: 0
; 0000 008D      case BACK:
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 008E           while(LStepCount<(Information.nStep4Turn90forLeft*2) || RStepCount<(Information.nStep4Turn90forRight*2))
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 008F           {
; 0000 0090                if(Flag.LmotorRun)
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0091                {
; 0000 0092                     LStepCount++;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0093                     Flag.LmotorRun = FALSE;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0094                }
; 0000 0095                if(Flag.RmotorRun)
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0096                {
; 0000 0097                     RStepCount++;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0098                     Flag.RmotorRun = FALSE;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0099                }
; 0000 009A           }
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 009B           break;
;PCODE: $000000E3 VOL: 0
; 0000 009C      }
;PCODE: $000000E4 VOL: 0
; 0000 009D      TCCR1B = 0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 009E      TCCR3B = 0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 009F }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;
;
;
;// Timer1 overflow interrupt service routine
;// Timer 1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 00A6 {
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00A7 // Place your code here
; 0000 00A8      switch(direction_control)
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00A9      {
; 0000 00AA           case LEFT:
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00AB                PORTD |= (rotateL[LeftstepCount]<<4);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00AC                PORTD &= ((rotateL[LeftstepCount]<<4)+0x0f);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00AD                LeftstepCount--;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00AE                if(LeftstepCount < 0)
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00AF                     LeftstepCount = sizeof(rotateL)-1;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00B0                break;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00B1           case RIGHT:
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00B2           case BACK:
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00B3           case FORWARD:
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00B4           case HALF:
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00B5                PORTD |= (rotateL[LeftstepCount]<<4);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00B6                PORTD &= ((rotateL[LeftstepCount]<<4)+0x0f);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00B7                LeftstepCount++;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00B8                LeftstepCount %= sizeof(rotateL);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00B9                break;
;PCODE: $00000137 VOL: 0
; 0000 00BA      }
;PCODE: $00000138 VOL: 0
; 0000 00BB      Flag.LmotorRun = TRUE;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00BC 
; 0000 00BD      TCNT1H = VelocityLeftmotorTCNT1 >> 8;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00BE      TCNT1L = VelocityLeftmotorTCNT1 & 0xff;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00BF }
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;
;// Timer 3 overflow interrupt service routine
;interrupt [TIM3_OVF] void timer3_ovf_isr(void)
; 0000 00C3 {
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00C4 // Place your code here
; 0000 00C5      switch(direction_control)
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00C6      {
; 0000 00C7           case RIGHT:
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00C8           case BACK:
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00C9                PORTE |= (rotateR[RightstepCount]<<4);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00CA                PORTE &= ((rotateR[RightstepCount]<<4)+0x0f);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00CB                RightstepCount--;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00CC                if(RightstepCount < 0)
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00CD                     RightstepCount = sizeof(rotateR)-1;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00CE                break;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00CF           case FORWARD:
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 00D0           case HALF:
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00D1           case LEFT:
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00D2                PORTE |= (rotateR[RightstepCount]<<4);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00D3                PORTE &= ((rotateR[RightstepCount]<<4)+0x0f);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00D4                RightstepCount++;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00D5                RightstepCount %= sizeof(rotateR);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00D6                break;
;PCODE: $0000018E VOL: 0
; 0000 00D7      }
;PCODE: $0000018F VOL: 0
; 0000 00D8      Flag.RmotorRun = TRUE;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 00D9 
; 0000 00DA      TCNT3H = VelocityRightmotorTCNT3 >> 8;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00DB      TCNT3L = VelocityRightmotorTCNT3 & 0xff;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00DC }
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 00E1 {
;PCODE: $0000019B VOL: 0
; 0000 00E2     double distance4perStep;
; 0000 00E3     distance4perStep = (double)(PI * TIRE_RAD / (double)MOTOR_STEP);
;PCODE: $0000019C VOL: 0
;	distance4perStep -> Y+0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 00E4 	Information.nStep4perBlock = (int)((double)180. / distance4perStep);
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00E5 	Information.nStep4Turn90forRight = (int)((PI*MOUSE_WIDTH/3.8)/distance4perStep);
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 00E6     Information.nStep4Turn90forLeft = (int)((PI*MOUSE_WIDTH/3.9)/distance4perStep);
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 00E7 // LEFT MOTOR - PORTD 4,5,6,7
; 0000 00E8      PORTD&=0x0F;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 00E9      DDRD|=0xF0;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00EA 
; 0000 00EB // RIGHT MOTOR - PORTE 4,5,6,7
; 0000 00EC      PORTE&=0x0F;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 00ED      DDRE|=0xF0;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 00EE 
; 0000 00EF // Timer/Counter 1 initialization
; 0000 00F0 // Clock source: System Clock
; 0000 00F1 // Clock value: 62.500 kHz
; 0000 00F2 // Mode: Normal top=FFFFh
; 0000 00F3 // OC1A output: Discon.
; 0000 00F4 // OC1B output: Discon.
; 0000 00F5 // OC1C output: Discon.
; 0000 00F6 // Noise Canceler: Off
; 0000 00F7 // Input Capture on Falling Edge
; 0000 00F8 // Timer 1 Overflow Interrupt: On
; 0000 00F9 // Input Capture Interrupt: Off
; 0000 00FA // Compare A Match Interrupt: Off
; 0000 00FB // Compare B Match Interrupt: Off
; 0000 00FC // Compare C Match Interrupt: Off
; 0000 00FD      TCCR1A=0x00;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 00FE      TCCR1B=0x04;
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 00FF      TCNT1H=0x00;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 0100      TCNT1L=0x00;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0101      ICR1H=0x00;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0102      ICR1L=0x00;
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0103      OCR1AH=0x00;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0104      OCR1AL=0x00;
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0105      OCR1BH=0x00;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0106      OCR1BL=0x00;
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0107      OCR1CH=0x00;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0108      OCR1CL=0x00;
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0109 
; 0000 010A // Timer/Counter 3 initialization
; 0000 010B // Clock source: System Clock
; 0000 010C // Clock value: 62.500 kHz
; 0000 010D // Mode: Normal top=FFFFh
; 0000 010E // OC3A output: Discon.
; 0000 010F // OC3B output: Discon.
; 0000 0110 // OC3C output: Discon.
; 0000 0111 // Noise Canceler: Off
; 0000 0112 // Input Capture on Falling Edge
; 0000 0113 // Timer 3 Overflow Interrupt: On
; 0000 0114 // Input Capture Interrupt: Off
; 0000 0115 // Compare A Match Interrupt: Off
; 0000 0116 // Compare B Match Interrupt: Off
; 0000 0117 // Compare C Match Interrupt: Off
; 0000 0118      TCCR3A=0x00;
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0119      TCCR3B=0x04;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 011A      TCNT3H=0x00;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 011B      TCNT3L=0x00;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 011C      ICR3H=0x00;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 011D      ICR3L=0x00;
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 011E      OCR3AH=0x00;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 011F      OCR3AL=0x00;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 0120      OCR3BH=0x00;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 0121      OCR3BL=0x00;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 0122      OCR3CH=0x00;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0123      OCR3CL=0x00;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0124 
; 0000 0125 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0126      TIMSK=0x04;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0127      ETIMSK=0x04;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 0128 
; 0000 0129 
; 0000 012A 
; 0000 012B #asm("sei")
;PCODE: $000001F0 VOL: 0
	sei
;PCODE: $000001F1 VOL: 0
; 0000 012C 
; 0000 012D     LeftstepCount = 0;		// 왼쪽 모터의 스텝 초기화
;PCODE: $000001F2 VOL: 0
; 0000 012E      RightstepCount = 0;		// 오른쪽 모터의 스텝 초기화
;PCODE: $000001F3 VOL: 0
; 0000 012F 
; 0000 0130 // Global enable interrupts
; 0000 0131 #asm("sei")
;PCODE: $000001F4 VOL: 0
	sei
;PCODE: $000001F5 VOL: 0
; 0000 0132 
; 0000 0133      VelocityLeftmotorTCNT1 = 65400;	// 왼쪽 모터의 속도 (65200 ~ 65535)
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 0134      VelocityRightmotorTCNT3 = 65400;	// 오른쪽 모터의 속도 (65200 ~ 65535)
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0135     InitializeSwitch;
;PCODE: $000001FA VOL: 0
; 0000 0136 //     Direction(RIGHT);		// 우로 90도 턴
; 0000 0137 //     Direction(HALF);		// 반블럭 전진
; 0000 0138 
; 0000 0139       switch1 = FALSE; // switch1, 2의 초기값은 FALSE 입니다.
;PCODE: $000001FB VOL: 0
; 0000 013A         switch2 = FALSE;
;PCODE: $000001FC VOL: 0
; 0000 013B while (1)
;PCODE: $000001FD VOL: 0
; 0000 013C       {
; 0000 013D       // Place your code here
; 0000 013E       Direction(LEFT);		// 좌로 90도 턴
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 013F 
; 0000 0140       Direction(LEFT);		// 좌로 90도
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 0141 
; 0000 0142             Direction(LEFT);		// 좌로 90도 턴
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0143 
; 0000 0144       Direction(LEFT);		// 좌로 90도
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0145             Direction(LEFT);		// 좌로 90도 턴
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0146 
; 0000 0147       Direction(LEFT);		// 좌로 90도
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0148             Direction(LEFT);		// 좌로 90도 턴
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0149 
; 0000 014A       Direction(LEFT);		// 좌로 90도
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 014B       break;
;PCODE: $00000216 VOL: 0
; 0000 014C       }
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 014D }
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
