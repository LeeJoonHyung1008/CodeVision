;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include<stdio.h>
;#include <math.h>
;#include "Motor.h"
;#include "Sensor.h"
;#include "LED.h"
;
;int vel_counter_high_L;
;int vel_counter_high_R;
;int aflag=0;
;int ado=0;
;int vel_counter_high1=65400;

	.DSEG
;int vel_counter_high2=65400;
;extern eeprom int StandardSensor[3], CenterStandardSensor[3],acc;
;int count=2;
;
;char rotateR[8] = {0b1001,0b0001,0b0101,0b0100,0b0110,0b0010,0b1010,0b1000};
;char rotateL[8] = {0b1001,0b1000,0b1010,0b0010,0b0110,0b0100,0b0101,0b0001};
;int LeftstepCount, RightstepCount;        // rotateR과 rotateL의 각각 스텝이 모터에 순서대로 입력되도록 Count
;unsigned int VelocityLeftmotorTCNT1, VelocityRightmotorTCNT3;    // 왼쪽과 오른쪽 모터의 TCNT 속도
;unsigned char direction_control;        // 인터럽트 루틴에 방향정보를 전달하기 위한 전역변수
;
;     struct {
;          int nStep4perBlock;            // 한 블록 이동시 필요한 모터회전 스텝 정보
;          int nStep4Turn91;
;          int nStep4Turn90;            // 90도 턴 이동시 필요한 모터회전 스텝 정보
;     } Information;
;     struct {
;          char LmotorRun;            // 왼쪽 모터가 회전했는지에 대한 Flag
;          char RmotorRun;            // 오른쪽 모터가 회전했는지에 대한 Flag
;     } Flag;
;
;
;//main문 대신 초기선언 해야 할 변수만 참고 할 것. (c파일은 main문 없음)
;//LeftstepCount = 0;        // 왼쪽 모터의 스텝 초기화
;//RightstepCount = 0;        // 오른쪽 모터의 스텝 초기화
;//#asm("sei")
;//VelocityLeftmotorTCNT1 = 65400;    // 왼쪽 모터의 속도 (65200 ~ 65535)
;//VelocityRightmotorTCNT3 = 65400;    // 오른쪽 모터의 속도 (65200 ~ 65535)
;
;
;void InitializeStepMotor(void)
; 0003 002B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 002C double distance4perStep;
; 0003 002D // LEFT MOTOR - PORTD 4,5,6,7
; 0003 002E      PORTD&=0x0F;
;PCODE: $0000000F VOL: 0
;	distance4perStep -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0003 002F      DDRD|=0xF0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0003 0030 
; 0003 0031 // RIGHT MOTOR - PORTE 4,5,6,7
; 0003 0032      PORTE&=0x0F;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0003 0033      DDRE|=0xF0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0003 0034 
; 0003 0035 // Timer/Counter 1 initialization
; 0003 0036 // Clock source: System Clock
; 0003 0037 // Clock value: 62.500 kHz
; 0003 0038 // Mode: Normal top=FFFFh
; 0003 0039 // OC1A output: Discon.
; 0003 003A // OC1B output: Discon.
; 0003 003B // OC1C output: Discon.
; 0003 003C // Noise Canceler: Off
; 0003 003D // Input Capture on Falling Edge
; 0003 003E // Timer 1 Overflow Interrupt: On
; 0003 003F // Input Capture Interrupt: Off
; 0003 0040 // Compare A Match Interrupt: Off
; 0003 0041 // Compare B Match Interrupt: Off
; 0003 0042 // Compare C Match Interrupt: Off
; 0003 0043      TCCR1A=0x00;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0003 0044      TCCR1B=0x04;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0003 0045      TCNT1H=0x00;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0003 0046      TCNT1L=0x00;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0003 0047      ICR1H=0x00;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0003 0048      ICR1L=0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0003 0049      OCR1AH=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0003 004A      OCR1AL=0x00;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0003 004B      OCR1BH=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0003 004C      OCR1BL=0x00;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0003 004D      OCR1CH=0x00;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0003 004E      OCR1CL=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0003 004F 
; 0003 0050 // Timer/Counter 3 initialization
; 0003 0051 // Clock source: System Clock
; 0003 0052 // Clock value: 62.500 kHz
; 0003 0053 // Mode: Normal top=FFFFh
; 0003 0054 // OC3A output: Discon.
; 0003 0055 // OC3B output: Discon.
; 0003 0056 // OC3C output: Discon.
; 0003 0057 // Noise Canceler: Off
; 0003 0058 // Input Capture on Falling Edge
; 0003 0059 // Timer 3 Overflow Interrupt: On
; 0003 005A // Input Capture Interrupt: Off
; 0003 005B // Compare A Match Interrupt: Off
; 0003 005C // Compare B Match Interrupt: Off
; 0003 005D // Compare C Match Interrupt: Off
; 0003 005E      TCCR3A=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0003 005F      TCCR3B=0x04;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0003 0060      TCNT3H=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0003 0061      TCNT3L=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0003 0062      ICR3H=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0003 0063      ICR3L=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0003 0064      OCR3AH=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0003 0065      OCR3AL=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0003 0066      OCR3BH=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0003 0067      OCR3BL=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0003 0068      OCR3CH=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0003 0069      OCR3CL=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0003 006A 
; 0003 006B // Timer(s)/Counter(s) Interrupt(s) initialization
; 0003 006C      TIMSK=0x04;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0003 006D      ETIMSK=0x04;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0003 006E      distance4perStep = (double)(PI * TIRE_RAD / (double)MOTOR_STEP);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0003 006F 
; 0003 0070     Information.nStep4perBlock = (int)((double)153 / distance4perStep);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0003 0071 
; 0003 0072 
; 0003 0073     Information.nStep4Turn90 = (int)((PI*MOUSE_WIDTH/3.902)/distance4perStep);   //3.902
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0003 0074 
; 0003 0075    /*     Information.nStep4perBlock = (int)((double)171 / distance4perStep);
; 0003 0076 
; 0003 0077     Information.nStep4Turn91= (int)((PI*MOUSE_WIDTH/4.14)/distance4perStep);
; 0003 0078 
; 0003 0079     Information.nStep4Turn90 = (int)((PI*MOUSE_WIDTH/4.05)/distance4perStep);     */
; 0003 007A 
; 0003 007B 
; 0003 007C }
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;
;int adjustmouse(void)
; 0003 0080 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0003 0081 	int adjLeftSensor,adjRightSensor;
; 0003 0082 	int adjflagcnt = 0;
; 0003 0083 
; 0003 0084 	adjLeftSensor = readSensor(LEFT_SENSOR);
;PCODE: $00000062 VOL: 0
;	adjLeftSensor -> R16,R17
;	adjRightSensor -> R18,R19
;	adjflagcnt -> R20,R21
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0003 0085 	adjRightSensor = readSensor(RIGHT_SENSOR);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0003 0086 
; 0003 0087 	if((adjRightSensor < CenterStandardSensor[2]+2)	&&(adjRightSensor > CenterStandardSensor[2]-50)&& (adjLeftSensor < CenterStandardSensor[1]+2))		// 왼쪽 벽이 존재하지 않을 경우    if((adjRightSensor < (StandardSensor[2]))	|| (adjLeftSensor < (StandardSensor[1])))
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0003 0088 	{
; 0003 0089 		vel_counter_high_L = vel_counter_high1;	// 속도를 같게하고 리턴
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0003 008A 		vel_counter_high_R = vel_counter_high2;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0003 008B 		return 0;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0003 008C 	}
; 0003 008D 
; 0003 008E 	if(adjRightSensor > CenterStandardSensor[2])	// 오른쪽 벽이 멀 경우
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0003 008F 	{                               //
; 0003 0090 		vel_counter_high_L-=2;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0003 0091 		vel_counter_high_R+=2;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0003 0092 		if(vel_counter_high_L < (vel_counter_high1-20))
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0003 0093 		{
; 0003 0094 			vel_counter_high_L = vel_counter_high1-20;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0003 0095 		}
; 0003 0096 
; 0003 0097 		if(vel_counter_high_R > (vel_counter_high2 + 20))
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0003 0098 		{
; 0003 0099 			vel_counter_high_R = vel_counter_high2 + 20;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0003 009A 		}
; 0003 009B 	}
;PCODE: $000000A5 VOL: 0
; 0003 009C 	else if((adjRightSensor < CenterStandardSensor[2])&&(adjRightSensor>CenterStandardSensor[1]))
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0003 009D 	adjflagcnt++;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0003 009E 
; 0003 009F 	if(adjLeftSensor >CenterStandardSensor[1])	// 왼쪽 벽이 멀 경우
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0003 00A0 	{
; 0003 00A1 
; 0003 00A2 		vel_counter_high_L+=2;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0003 00A3 		vel_counter_high_R-=2;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0003 00A4 		if(vel_counter_high_R < (vel_counter_high2-20))
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0003 00A5 		{
; 0003 00A6 			vel_counter_high_R = vel_counter_high2-20;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0003 00A7 		}
; 0003 00A8 		if(vel_counter_high_L > (vel_counter_high1 +20))
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0003 00A9 		{
; 0003 00AA 			vel_counter_high_L = vel_counter_high1 +20;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0003 00AB 		}
; 0003 00AC 	}
;PCODE: $000000D4 VOL: 0
; 0003 00AD 	else if((adjLeftSensor < CenterStandardSensor[1])&&(adjRightSensor>CenterStandardSensor[2]))
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0003 00AE 	adjflagcnt++;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0003 00AF    /* if((adjLeftSensor < CenterStandardSensor[1])&&(adjRightSensor < (CenterStandardSensor[2]-100)))                                              /////////////
; 0003 00B0     {                               //
; 0003 00B1 		vel_counter_high_L-=2;
; 0003 00B2 		vel_counter_high_R+=2;
; 0003 00B3 		if(vel_counter_high_L < (vel_counter_high1-20))
; 0003 00B4 		{
; 0003 00B5 			vel_counter_high_L = vel_counter_high1-20;
; 0003 00B6 		}
; 0003 00B7 
; 0003 00B8 		if(vel_counter_high_R > (vel_counter_high2 + 20))
; 0003 00B9 		{
; 0003 00BA 			vel_counter_high_R = vel_counter_high2 + 20;
; 0003 00BB 		}   */
; 0003 00BC         if((adjLeftSensor<CenterStandardSensor[1])&&(adjLeftSensor>(CenterStandardSensor[1]-100)))
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0003 00BD          {                               //
; 0003 00BE 		vel_counter_high_L-=10;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0003 00BF 		vel_counter_high_R+=10;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0003 00C0 		if(vel_counter_high_L < (vel_counter_high1-20))
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0003 00C1 		{
; 0003 00C2 			vel_counter_high_L = vel_counter_high1-20;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0003 00C3 		}
; 0003 00C4 
; 0003 00C5 		if(vel_counter_high_R > (vel_counter_high2 + 20))
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0003 00C6 		{
; 0003 00C7 			vel_counter_high_R = vel_counter_high2 + 20;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0003 00C8 		}
; 0003 00C9         return 0;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0003 00CA           if((adjRightSensor<CenterStandardSensor[2])&&(adjRightSensor>(CenterStandardSensor[2]-100)))
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0003 00CB          {                               //
; 0003 00CC 		vel_counter_high_L+=10;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0003 00CD 		vel_counter_high_R-=10;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0003 00CE 		if(vel_counter_high_R < (vel_counter_high2-20))
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0003 00CF 		{
; 0003 00D0 			vel_counter_high_R = vel_counter_high2-20;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0003 00D1 		}
; 0003 00D2 		if(vel_counter_high_L > (vel_counter_high1 +20))
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0003 00D3 		{
; 0003 00D4 			vel_counter_high_L = vel_counter_high1 +20;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0003 00D5 		}
; 0003 00D6         return 0;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0003 00D7         }
; 0003 00D8 	}
;PCODE: $00000135 VOL: 0
; 0003 00D9 	if(adjflagcnt == 2)				// 오른쪽 벽과 왼쪽 벽이 둘다 멀지 않을 경우
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0003 00DA 	{							// 속도 동일하게
; 0003 00DB 		vel_counter_high_L = vel_counter_high1;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0003 00DC 		vel_counter_high_R = vel_counter_high2;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0003 00DD 		return 0;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0003 00DE 	}
; 0003 00DF 		return 1;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0003 00E0 }
;PCODE: $00000147 VOL: 0
;void Direction(int mode)
; 0003 00E2 {
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0003 00E3      int LStepCount = 0, RStepCount = 0;
; 0003 00E4 
; 0003 00E5      TCCR1B = 0x04;
;PCODE: $0000014A VOL: 0
;	mode -> Y+4
;	LStepCount -> R16,R17
;	RStepCount -> R18,R19
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0003 00E6      TCCR3B = 0x04;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0003 00E7 
; 0003 00E8      direction_control = mode;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0003 00E9 
; 0003 00EA      Flag.LmotorRun = FALSE;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0003 00EB      Flag.RmotorRun = FALSE;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0003 00EC 
; 0003 00ED      switch(mode)
;PCODE: $0000015A VOL: 0
; 0003 00EE      {
; 0003 00EF      case FORWARD:
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0003 00F0           while(LStepCount<Information.nStep4perBlock || RStepCount<Information.nStep4perBlock)
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0003 00F1           {
; 0003 00F2                if(Flag.LmotorRun)
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0003 00F3                {
; 0003 00F4                     LStepCount++;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0003 00F5                     Flag.LmotorRun = FALSE;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0003 00F6                }
; 0003 00F7                if(Flag.RmotorRun)
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0003 00F8                {
; 0003 00F9                     RStepCount++;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0003 00FA                     Flag.RmotorRun = FALSE;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0003 00FB                }
; 0003 00FC           }
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0003 00FD           break;
;PCODE: $0000017A VOL: 0
; 0003 00FE      case HALF:
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0003 00FF 
; 0003 0100       while(LStepCount<(Information.nStep4perBlock>>1) || RStepCount<(Information.nStep4perBlock>>1))
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0003 0101           {       if(readSensor(FRONT_SENSOR)>CenterStandardSensor[0])
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0003 0102                     {break;}
;PCODE: $0000018F VOL: 0
; 0003 0103                     count=count%50;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0003 0104                  if(count==1)
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0003 0105                {
; 0003 0106                if((readSensor(FRONT_SENSOR)<acc)||(ado<3))
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0003 0107                vel_counter_high2+=1;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0003 0108                vel_counter_high1+=1;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0003 0109                if(vel_counter_high2>65500)
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0003 010A                vel_counter_high2=65500;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0003 010B                if(vel_counter_high1>65500)   /////////
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0003 010C                vel_counter_high1=65500;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0003 010D                aflag=1;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0003 010E                 }
; 0003 010F                count++;
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0003 0110                if((readSensor(FRONT_SENSOR)>acc)&&(ado>=3))
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0003 0111                {
; 0003 0112                if(count==1)
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0003 0113                 {vel_counter_high2-=4;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0003 0114                vel_counter_high1-=4;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0003 0115                if(vel_counter_high2<65401)
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0003 0116                vel_counter_high2=65400;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0003 0117                if(vel_counter_high1<65401)   /////////
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0003 0118                vel_counter_high1=65400;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0003 0119                aflag=0;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0003 011A 
; 0003 011B                }
; 0003 011C                }
;PCODE: $000001E4 VOL: 0
; 0003 011D 
; 0003 011E             if(Flag.LmotorRun||Flag.RmotorRun)
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0003 011F                {
; 0003 0120                     if(readSensor(FRONT_SENSOR)>CenterStandardSensor[0])
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0003 0121                     break;
;PCODE: $000001F7 VOL: 0
; 0003 0122                LED_OFF(LED1||LED2||LED3||LED4);
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0003 0123 
; 0003 0124                adjustmouse();
;PCODE: $0000020D VOL: 0
; 0003 0125 
; 0003 0126                VelocityLeftmotorTCNT1=vel_counter_high_L;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0003 0127                VelocityRightmotorTCNT3=vel_counter_high_R;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0003 0128                LED_ON(LED3);
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0003 0129                }
; 0003 012A                if(Flag.LmotorRun)
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0003 012B                {  if(readSensor(FRONT_SENSOR)>CenterStandardSensor[0])
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0003 012C                     break;
;PCODE: $00000221 VOL: 0
; 0003 012D                     LStepCount++;
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0003 012E                     Flag.LmotorRun = FALSE;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0003 012F                     adjustmouse();
;PCODE: $00000227 VOL: 0
; 0003 0130 
; 0003 0131                VelocityLeftmotorTCNT1=vel_counter_high_L;
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0003 0132                VelocityRightmotorTCNT3=vel_counter_high_R;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0003 0133                }
; 0003 0134                if(Flag.RmotorRun)
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0003 0135                {  if(readSensor(FRONT_SENSOR)>CenterStandardSensor[0])
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0003 0136                     break;
;PCODE: $00000239 VOL: 0
; 0003 0137                     RStepCount++;
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0003 0138                     Flag.RmotorRun = FALSE;
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0003 0139                     adjustmouse();
;PCODE: $00000240 VOL: 0
; 0003 013A 
; 0003 013B                VelocityLeftmotorTCNT1=vel_counter_high_L;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0003 013C                VelocityRightmotorTCNT3=vel_counter_high_R;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0003 013D                }
; 0003 013E 
; 0003 013F           }
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0003 0140           break;
;PCODE: $00000248 VOL: 0
; 0003 0141      case LEFT:
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0003 0142      while(LStepCount<Information.nStep4Turn90 || RStepCount<Information.nStep4Turn90)
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0003 0143           {
; 0003 0144                if(Flag.LmotorRun)
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0003 0145                {
; 0003 0146                     LStepCount++;
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0003 0147                     Flag.LmotorRun = FALSE;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0003 0148                }
; 0003 0149                if(Flag.RmotorRun)
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0003 014A                {
; 0003 014B                     RStepCount++;
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0003 014C                     Flag.RmotorRun = FALSE;
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0003 014D                }
; 0003 014E           }
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0003 014F           break;
;PCODE: $0000026B VOL: 0
; 0003 0150      case RIGHT:
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0003 0151           while(LStepCount<Information.nStep4Turn90 || RStepCount<Information.nStep4Turn90)
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0003 0152           {
; 0003 0153                if(Flag.LmotorRun)
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0003 0154                {
; 0003 0155                     LStepCount++;
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0003 0156                     Flag.LmotorRun = FALSE;
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0003 0157                }
; 0003 0158                if(Flag.RmotorRun)
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0003 0159                {
; 0003 015A                     RStepCount++;
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0003 015B                     Flag.RmotorRun = FALSE;
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0003 015C                }
; 0003 015D           }
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0003 015E           break;
;PCODE: $0000028E VOL: 0
; 0003 015F      case BACK:
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0003 0160           while(LStepCount<(Information.nStep4Turn90*2) || RStepCount<(Information.nStep4Turn90*2))
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0003 0161           {
; 0003 0162                if(Flag.LmotorRun)
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0003 0163                {
; 0003 0164                     LStepCount++;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0003 0165                     Flag.LmotorRun = FALSE;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0003 0166                }
; 0003 0167                if(Flag.RmotorRun)
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0003 0168                {
; 0003 0169                     RStepCount++;
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0003 016A                     Flag.RmotorRun = FALSE;
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0003 016B                }
; 0003 016C           }
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0003 016D           break;
;PCODE: $000002B1 VOL: 0
; 0003 016E      }
;PCODE: $000002B2 VOL: 0
; 0003 016F      TCCR1B = 0x00;
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0003 0170      TCCR3B = 0x00;
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0003 0171 }
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;
;// Timer 1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0003 0175 {
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0003 0176 // Place your code here
; 0003 0177      switch(direction_control)
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0003 0178      {
; 0003 0179           case LEFT:
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0003 017A                PORTD |= (rotateL[LeftstepCount]<<4);
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0003 017B                PORTD &= ((rotateL[LeftstepCount]<<4)+0x0f);
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0003 017C                LeftstepCount--;
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0003 017D                if(LeftstepCount < 0)
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0003 017E                     LeftstepCount = sizeof(rotateL)-1;
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0003 017F                break;
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0003 0180           case RIGHT:
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0003 0181           case BACK:
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0003 0182           case FORWARD:
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0003 0183           case HALF:
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0003 0184                PORTD |= (rotateL[LeftstepCount]<<4);
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0003 0185                PORTD &= ((rotateL[LeftstepCount]<<4)+0x0f);
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0003 0186                LeftstepCount++;
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0003 0187                LeftstepCount %= sizeof(rotateL);
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0003 0188                break;
;PCODE: $00000308 VOL: 0
; 0003 0189      }
;PCODE: $00000309 VOL: 0
; 0003 018A      Flag.LmotorRun = TRUE;
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
; 0003 018B 
; 0003 018C      TCNT1H = VelocityLeftmotorTCNT1 >> 8;
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0003 018D      TCNT1L = VelocityLeftmotorTCNT1 & 0xff;
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0003 018E }
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;
;// Timer 3 overflow interrupt service routine
;interrupt [TIM3_OVF] void timer3_ovf_isr(void)
; 0003 0192 {
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0003 0193 // Place your code here
; 0003 0194      switch(direction_control)
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0003 0195      {
; 0003 0196           case RIGHT:
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0003 0197           case BACK:
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0003 0198                PORTE |= (rotateR[RightstepCount]<<4);
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0003 0199                PORTE &= ((rotateR[RightstepCount]<<4)+0x0f);
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0003 019A                RightstepCount--;
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0003 019B                if(RightstepCount < 0)
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0003 019C                     RightstepCount = sizeof(rotateR)-1;
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0003 019D                break;
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0003 019E           case FORWARD:
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0003 019F           case HALF:
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0003 01A0           case LEFT:
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0003 01A1                PORTE |= (rotateR[RightstepCount]<<4);
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0003 01A2                PORTE &= ((rotateR[RightstepCount]<<4)+0x0f);
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0003 01A3                RightstepCount++;
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0003 01A4                RightstepCount %= sizeof(rotateR);
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0003 01A5                break;
;PCODE: $00000362 VOL: 0
; 0003 01A6      }
;PCODE: $00000363 VOL: 0
; 0003 01A7      Flag.RmotorRun = TRUE;
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0003 01A8 
; 0003 01A9      TCNT3H = VelocityRightmotorTCNT3 >> 8;
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0003 01AA      TCNT3L = VelocityRightmotorTCNT3 & 0xff;
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0003 01AB }
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
