;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;// Standard Input/Output functions
;#include <stdio.h>
;#include "Sensor.h"
;#include "switch.h"
;#include "LED.h"
;
;char switch1;   // 새롭게 선언한 switch1, switch2입니다. (boolean 변수)
;char switch2;
;int count_SW = 0;
;unsigned int Front=0, Right=0, Left = 0;
;int i=0, j=0 ,k=0;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)        // INT0에 대한 ISR 함수입니다. (SW1에 해당합니다.)
; 0000 0011 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0012 // Place your code here
; 0000 0013      switch1 = TRUE;    // 해당 Interrupt가 호출되면 switch1의 boolean 값을 TRUE로 바꿔줍니다.
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0014 }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)        // INT1에 대한 ISR 함수입니다. (SW2에 해당합니다.)
; 0000 0018 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0019 // Place your code here
; 0000 001A      switch2 = TRUE;    // 해당 Interrupt가 호출되면 switch2의 boolean 값을 TRUE로 바꿔줍니다.
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001B }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;void InitializeSwitch(void)    // Switch 관련 레지스터를 설정하는 함수입니다.
; 0000 001E {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001F // 스위치 PORTD 0,1
; 0000 0020      PORTD &= 0xfc;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0021      DDRD &= 0xfc;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0022 
; 0000 0023 // External Interrupt(s) initialization
; 0000 0024 // INT0: On
; 0000 0025 // INT0 Mode: Falling Edge
; 0000 0026 // INT1: On
; 0000 0027 // INT1 Mode: Falling Edge
; 0000 0028 // INT2: Off
; 0000 0029 // INT3: Off
; 0000 002A // INT4: Off
; 0000 002B // INT5: Off
; 0000 002C // INT6: Off
; 0000 002D // INT7: Off
; 0000 002E      EICRA=0x0A;    // SW1, 2에 대해 모두 Falling Edge로 선언합니다.
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002F      EICRB=0x00;    // 아무런 Interrupt를 사용하지 않습니다.
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0030      EIMSK=0x03;    // INT0, 1을 Enable 해줍니다.
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0031      EIFR=0x03;        // INT0, 1을 Enable 해줍니다.
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0032 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;
;char SW1(void)    // SW1에 대한 함수입니다.
; 0000 0035 {
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0036      char ret;    // return 해줄 변수를 새롭게 선언합니다.
; 0000 0037 
; 0000 0038      ret = switch1;    // switch1의 현재 값과 바꿉니다.
;PCODE: $0000002F VOL: 0
;	ret -> R17
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0039      switch1 = FALSE;    // switch1에 FALSE 값을 넣습니다.
;PCODE: $00000032 VOL: 0
; 0000 003A 
; 0000 003B      return ret;     // ret를 반환합니다.
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003C }
;PCODE: $00000036 VOL: 0
;
;char SW2(void)   // SW2에 대한 함수입니다.
; 0000 003F {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0040      char ret;   // return 해줄 변수를 새롭게 선언합니다.
; 0000 0041 
; 0000 0042      ret = switch2;   // switch2의 현재 값과 바꿉니다.
;PCODE: $00000039 VOL: 0
;	ret -> R17
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0043      switch2 = FALSE;   // switch2에 FALSE 값을 넣습니다.
;PCODE: $0000003C VOL: 0
; 0000 0044 
; 0000 0045      return ret;     // ret를 반환합니다.
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0046 }
;PCODE: $00000040 VOL: 0
;
;void InitializeSensor(void)
; 0000 0049 {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 004A  // PORTB 5,6,7 발광센서
; 0000 004B  PORTB &= 0X1F;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 004C  DDRB |= 0XE0;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 004D  // PORTF 0,1,2 수광부센서
; 0000 004E  PORTF &= 0XF8;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 004F  DDRF &= 0XF8;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0050  //ADC initialization
; 0000 0051  //ADC Clock frequency: 125.000kHz
; 0000 0052  //ADC Voltage Reference: AVCC pin
; 0000 0053  ADMUX = ADC_VREF_TYPE;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0054  ADCSRA = 0X87;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0055 }
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;
;unsigned int read_adc(unsigned char adc_input)
; 0000 0058 {
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0059  ADMUX=adc_input | (ADC_VREF_TYPE & 0xff); // 채널 선택
;	adc_input -> Y+0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 005A // Delay needed for the stabilization of the ADC input voltage
; 0000 005B  delay_us(10);
;PCODE: $0000005A VOL: 0
; 0000 005C // Start the AD conversion(single conversion mode)
; 0000 005D  ADCSRA|=0x40;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 005E // Wait for the AD conversion to complete
; 0000 005F  while ((ADCSRA & 0x10)==0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0060   ADCSRA|=0x10;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0061  return ADCW;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0062 }
;PCODE: $00000068 VOL: 0
;unsigned int readSensor(char si)
; 0000 0064 {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0065  unsigned int ret;
; 0000 0066 
; 0000 0067  switch(si)
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;	si -> Y+2
;	ret -> R16,R17
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0068  {
; 0000 0069  case FRONT_SENSOR: // 앞쪽을 관찰함
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 006A  PORTB.5 = 1;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 006B  delay_us(50);
;PCODE: $00000073 VOL: 0
; 0000 006C  ret = read_adc(si); // adc값을 읽음
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 006D  PORTB.5 = 0;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 006E  break;
;PCODE: $0000007A VOL: 0
; 0000 006F  case LEFT_SENSOR: // 왼쪽을 관찰함
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0070  PORTB.6 = 1;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0071  delay_us(50);
;PCODE: $00000080 VOL: 0
; 0000 0072  ret = read_adc(si); // adc값을 읽음
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0073  PORTB.6 = 0;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0074  break;
;PCODE: $00000087 VOL: 0
; 0000 0075  case RIGHT_SENSOR: // 오른쪽을 관찰함
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0076  PORTB.7 = 1;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0077  delay_us(50);
;PCODE: $0000008D VOL: 0
; 0000 0078  ret = read_adc(si); // adc값을 읽음
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0079  PORTB.7 = 0;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 007A  break;
;PCODE: $00000094 VOL: 0
; 0000 007B  }
;PCODE: $00000095 VOL: 0
; 0000 007C  return ret; // adc값을 반환함
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 007D }
;PCODE: $0000009D VOL: 0
;
;void InitializeUART(void){
; 0000 007F void InitializeUART(void){
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0080     // USART1 initialization
; 0000 0081     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0082     // USART1 Receiver: On
; 0000 0083     // USART1 Transmitter: On
; 0000 0084     // USART1 Mode: Asynchronous
; 0000 0085     // USART1 Baud Rate: 9600
; 0000 0086     UCSR1A=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0087     UCSR1B=0x18;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0088     UCSR1C=0x06;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0089     UBRR1H=0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 008A     UBRR1L=0x67;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 008B }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;
;void main(void)
; 0000 008E {
;PCODE: $000000AC VOL: 0
; 0000 008F      InitializeLED();
;PCODE: $000000AD VOL: 0
; 0000 0090      InitializeSensor();
;PCODE: $000000AE VOL: 0
; 0000 0091      InitializeUART();
;PCODE: $000000AF VOL: 0
; 0000 0092      InitializeSwitch();
;PCODE: $000000B0 VOL: 0
; 0000 0093 
; 0000 0094      switch1 = FALSE;   // switch1, 2의 초기값은 FALSE 입니다.
;PCODE: $000000B1 VOL: 0
; 0000 0095      switch2 = FALSE;
;PCODE: $000000B2 VOL: 0
; 0000 0096 
; 0000 0097      // Global enable interrupts
; 0000 0098     #asm("sei")   // 전역 Interrupt를 Enable 합니다.
;PCODE: $000000B3 VOL: 0
	sei
;PCODE: $000000B4 VOL: 0
; 0000 0099 
; 0000 009A while (1)
;PCODE: $000000B5 VOL: 0
; 0000 009B  {
; 0000 009C 
; 0000 009D   delay_ms(20); // 통신할 때 생기는 렉 때문에 추가했다.
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 009E  printf("CENTER : %d LEFT : %d RIGHT : %d\r\n",
; 0000 009F  readSensor(FRONT_SENSOR),readSensor(LEFT_SENSOR),readSensor(RIGHT_SENSOR));
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00A0 // 현재 Sensor가 받아오는 값을 출력한다.
; 0000 00A1 
; 0000 00A2 
; 0000 00A3 
; 0000 00A4  };
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00A5 }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
