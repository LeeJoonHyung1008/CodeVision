;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <math.h>
;#include "StepMotor.h"
;#include "Sensor.h"
;#include <delay.h>
;
;// Declare your global variables here
;     char rotateR[8] = {0b1001,0b0001,0b0101,0b0100,0b0110,0b0010,0b1010,0b1000};

	.DSEG
;     char rotateL[8] = {0b1001,0b1000,0b1010,0b0010,0b0110,0b0100,0b0101,0b0001};
;
;     int LeftstepCount;
;     int RightstepCount;        // rotateR과 rotateL의 각각 스텝이 모터에 순서대로 입력되도록 Count
;     unsigned int VelocityLeftmotorTCNT1;
;     unsigned int VelocityRightmotorTCNT3;    // 왼쪽과 오른쪽 모터의 TCNT 속도
;     unsigned char direction_control;        // 인터럽트 루틴에 방향정보를 전달하기 위한 전역변수
;
;     unsigned int vel_counter_high_L, vel_counter_high_R, vel_counter_high; // 마우스 보정을 위한 변수 설정.
;
;     struct {
;          int nStep4perBlock;            // 한 블록 이동시 필요한 모터회전 스텝 정보
;          int nStep4Turn90forRight;            // 90도 턴 이동시 필요한 모터회전 스텝 정보
;          int nStep4Turn90forLeft;  // LEFT가 90도 회전을 하기 위한 step 수
;          int nStep4Turn90_smooth;
;     } Information;
;     struct {
;          char LmotorRun;            // 왼쪽 모터가 회전했는지에 대한 Flag
;          char RmotorRun;            // 오른쪽 모터가 회전했는지에 대한 Flag
;     } Flag;
;
;    void A(int speed)
; 0003 001F     {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 0020         VelocityLeftmotorTCNT1=65400;
;	speed -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0003 0021         VelocityRightmotorTCNT3=65400;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0003 0022         VelocityLeftmotorTCNT1+=speed;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0003 0023         VelocityRightmotorTCNT3+=speed;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0003 0024 
; 0003 0025         if(VelocityLeftmotorTCNT1 > 65535)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0003 0026         {
; 0003 0027             VelocityLeftmotorTCNT1 = 65535;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0003 0028         }
; 0003 0029 
; 0003 002A         if(VelocityRightmotorTCNT3 > 65535)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0003 002B         {
; 0003 002C             VelocityRightmotorTCNT3 = 65535;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0003 002D         }
; 0003 002E 
; 0003 002F     }
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;
;    void D(int speed2)
; 0003 0032     {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0003 0033         VelocityLeftmotorTCNT1=65400;
;	speed2 -> Y+0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0003 0034         VelocityRightmotorTCNT3=65400;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0003 0035         VelocityLeftmotorTCNT1-=speed2;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0003 0036         VelocityRightmotorTCNT3-=speed2;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0003 0037 
; 0003 0038         if(VelocityLeftmotorTCNT1 < 65200)
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0003 0039         {
; 0003 003A             VelocityLeftmotorTCNT1 = 65200;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0003 003B         }
; 0003 003C 
; 0003 003D         if(VelocityRightmotorTCNT3 < 65200)
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0003 003E         {
; 0003 003F             VelocityRightmotorTCNT3 = 65200;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0003 0040         }
; 0003 0041     }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;int adjustmouse(void)
; 0003 0044 {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0003 0045     int adjLeftSensor,adjRightSensor;
; 0003 0046     int adjflagcnt = 0;
; 0003 0047 
; 0003 0048     adjLeftSensor = readSensor(LEFT_SENSOR);
;PCODE: $0000004B VOL: 0
;	adjLeftSensor -> R16,R17
;	adjRightSensor -> R18,R19
;	adjflagcnt -> R20,R21
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0003 0049     adjRightSensor = readSensor(RIGHT_SENSOR);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0003 004A 
; 0003 004B     vel_counter_high_L = VelocityLeftmotorTCNT1;	        //현재 바퀴속도값을 변수 counter에 각각 저장(65200 ~ 65535)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0003 004C     vel_counter_high_R = VelocityRightmotorTCNT3;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0003 004D 
; 0003 004E     if((adjRightSensor < StandardSensor[2])             // 오른쪽 벽이 존재하지 않을 경우
; 0003 004F     || (adjLeftSensor < StandardSensor[1]))             // 왼쪽 벽이 존재하지 않을 경우
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0003 0050     {
; 0003 0051         vel_counter_high_L = vel_counter_high;          // 속도를 같게하고 리턴
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0003 0052         vel_counter_high_R = vel_counter_high;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0003 0053         return 0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0003 0054     }
; 0003 0055 
; 0003 0056     if(adjRightSensor < CenterStandardSensor[2])            // 오른쪽 벽이 멀 경우
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0003 0057     {
; 0003 0058         vel_counter_high_L+=2.5;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0003 0059         vel_counter_high_R-=2.5;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0003 005A         if(vel_counter_high_L > vel_counter_high+15)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0003 005B         {
; 0003 005C             vel_counter_high_L = vel_counter_high+15;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0003 005D         }
; 0003 005E 
; 0003 005F         if(vel_counter_high_R < (vel_counter_high - 15))
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0003 0060         {
; 0003 0061             vel_counter_high_R = (vel_counter_high - 15);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0003 0062         }
; 0003 0063     }
;PCODE: $0000008F VOL: 0
; 0003 0064     else
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0003 0065     adjflagcnt++;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0003 0066 
; 0003 0067     if(adjLeftSensor < CenterStandardSensor[1])    // 왼쪽 벽이 멀 경우
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0003 0068     {
; 0003 0069         vel_counter_high_L-=2.5;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0003 006A         vel_counter_high_R+=2.5;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0003 006B         if(vel_counter_high_R > vel_counter_high+15)
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0003 006C         {
; 0003 006D             vel_counter_high_R = vel_counter_high+15;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0003 006E         }
; 0003 006F         if(vel_counter_high_L < (vel_counter_high - 15))
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0003 0070         {
; 0003 0071             vel_counter_high_L = (vel_counter_high - 15);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0003 0072         }
; 0003 0073     }
;PCODE: $000000B5 VOL: 0
; 0003 0074     else
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0003 0075     adjflagcnt++;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0003 0076 
; 0003 0077     if(adjflagcnt == 2)  // 오른쪽 벽과 왼쪽 벽이 둘다 멀지 않을 경우
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0003 0078 	{
; 0003 0079 		vel_counter_high_L = vel_counter_high;  // 속도 동일하게
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0003 007A 		vel_counter_high_R = vel_counter_high;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0003 007B 
; 0003 007C 	}
; 0003 007D     VelocityLeftmotorTCNT1 = vel_counter_high_L;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0003 007E     VelocityRightmotorTCNT3 = vel_counter_high_R;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0003 007F }
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;
;int adjustmouse_Super(void)  //보정
; 0003 0082 {
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0003 0083     int adjLeftSensor,adjRightSensor;  //보정하기위한 센서값을 저장한 변수
; 0003 0084     int adjflagcnt = 0;
; 0003 0085 
; 0003 0086     adjLeftSensor = readSensor(LEFT_SENSOR);
;PCODE: $000000CD VOL: 0
;	adjLeftSensor -> R16,R17
;	adjRightSensor -> R18,R19
;	adjflagcnt -> R20,R21
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0003 0087     adjRightSensor = readSensor(RIGHT_SENSOR);  //읽어들인 센서값을 저장
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0003 0088 
; 0003 0089     vel_counter_high_L=VelocityLeftmotorTCNT1;   //모터 속도 65250 으로 초기화
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0003 008A     vel_counter_high_R=VelocityRightmotorTCNT3;  //모터 속도 65400 으로 초기화
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0003 008B 
; 0003 008C 
; 0003 008D     if(adjRightSensor > CenterStandardSensor[2])  //미로 주행 중 오른 쪽 벽에 너무 가까이 붙었을 경우
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0003 008E     {
; 0003 008F         vel_counter_high_L-=2;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0003 0090         vel_counter_high_R+=1;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0003 0091         if(vel_counter_high_R > vel_counter_high+20)
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0003 0092             vel_counter_high_R = vel_counter_high+20;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0003 0093         if(vel_counter_high_L < (vel_counter_high-20))
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0003 0094             vel_counter_high_L = (vel_counter_high-20);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0003 0095         //왼쪽 모터의 속도를 줄이고 오른쪽 모터의 속도를 높여서 오른쪽 벽에서 멀어지도록 하였다.
; 0003 0096     }
;PCODE: $000000F6 VOL: 0
; 0003 0097     else
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0003 0098     {
; 0003 0099         if(adjRightSensor < CenterStandardSensor[2]) // 오른쪽 벽이 멀 경우
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0003 009A         {
; 0003 009B             vel_counter_high_L+=1;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0003 009C             vel_counter_high_R-=2;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0003 009D             if(vel_counter_high_L > vel_counter_high+20)
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0003 009E                 vel_counter_high_L = vel_counter_high+20;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0003 009F             if(vel_counter_high_R < vel_counter_high-20)
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0003 00A0                 vel_counter_high_R = vel_counter_high-20;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0003 00A1             //오른쪽 벽이 멀 경우에 왼쪽 모터의 속도를 높이고 오른쪽 모터의 속도를 줄여서 주행경로의 가운데에 마우스가 위치하게 한다.
; 0003 00A2         }
;PCODE: $00000113 VOL: 0
; 0003 00A3         else
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0003 00A4             adjflagcnt++;  //오른쪽 벽에 너무 가깝지도 않고, 멀지도 않은 경우 flagcnt 증가
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0003 00A5 
; 0003 00A6         if(adjLeftSensor < CenterStandardSensor[1]) // 왼쪽 벽이 멀 경우
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0003 00A7         {
; 0003 00A8             vel_counter_high_L-=2;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0003 00A9             vel_counter_high_R+=1;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0003 00AA             if(vel_counter_high_R > vel_counter_high+20)
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0003 00AB                 vel_counter_high_R = vel_counter_high+20;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0003 00AC             if(vel_counter_high_L < (vel_counter_high-20))
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0003 00AD                 vel_counter_high_L = (vel_counter_high-20);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0003 00AE             //왼쪽 벽이 멀 경우에 오른쪽 모터의 속도를 높이고 왼쪽 모터의 속도를 줄여서 주행경로의 가운데에 마우스가 위치하도록 한다.
; 0003 00AF         }
;PCODE: $00000133 VOL: 0
; 0003 00B0         else
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0003 00B1             adjflagcnt++;   //오른쪽 벽에 너무 가깝지도 않고, 왼쪽 벽과도 멀지 않은 경우 flagcnt 증가
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0003 00B2     }
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0003 00B3 
; 0003 00B4     if(adjLeftSensor > CenterStandardSensor[1])  //마우스가 왼쪽 벽에 너무 가까이 붙은 경우
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0003 00B5     {
; 0003 00B6         vel_counter_high_L+=1;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0003 00B7         vel_counter_high_R-=2;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0003 00B8         if(vel_counter_high_L > vel_counter_high+20)
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0003 00B9             vel_counter_high_L = vel_counter_high+20;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0003 00BA         if(vel_counter_high_R < vel_counter_high-20)
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0003 00BB             vel_counter_high_R = vel_counter_high-20;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0003 00BC         //왼쪽모터의 속도를 높이고 오른쪽 모터의 속도를 줄여서 주행경로의 가운데에 마우스가 위치하도록 한다.
; 0003 00BD     }
;PCODE: $00000154 VOL: 0
; 0003 00BE     else
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0003 00BF     {
; 0003 00C0         if(adjRightSensor < CenterStandardSensor[2]) // 오른쪽 벽이 멀 경우
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0003 00C1         {
; 0003 00C2             vel_counter_high_L+=1;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0003 00C3             vel_counter_high_R-=2;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0003 00C4             if(vel_counter_high_L > vel_counter_high+20)
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0003 00C5                 vel_counter_high_L = vel_counter_high+20;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0003 00C6             if(vel_counter_high_R < vel_counter_high-20)
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0003 00C7                 vel_counter_high_R = vel_counter_high-20;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0003 00C8             //왼쪽모터의 속도를 높이고 오른쪽 모터의 속도를 줄여서 주행경로의 가운데에 마우스가 위치하도록 한다.
; 0003 00C9         }
;PCODE: $00000171 VOL: 0
; 0003 00CA         else
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0003 00CB             adjflagcnt++;  //왼쪽 벽에 너무 가깝지 않고 오른쪽 벽과도 멀지 않은 경우 flagcnt 증가
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0003 00CC 
; 0003 00CD         if(adjLeftSensor < CenterStandardSensor[1]) // 왼쪽 벽이 멀 경우
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0003 00CE         {
; 0003 00CF             vel_counter_high_L-=2;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0003 00D0             vel_counter_high_R+=1;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0003 00D1             if(vel_counter_high_R > vel_counter_high+20)
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0003 00D2                 vel_counter_high_R = vel_counter_high+20;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0003 00D3             if(vel_counter_high_L < (vel_counter_high-20))
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0003 00D4                 vel_counter_high_L = (vel_counter_high-20);
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0003 00D5             //왼쪽 모터의 속도를 줄이고 오른쪽 모터의 속도를 줄여 주행경로의 가운데에 마우스가 위치하도록 한다.
; 0003 00D6         }
;PCODE: $00000191 VOL: 0
; 0003 00D7         else
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0003 00D8             adjflagcnt++;  //왼쪽 벽에 너무 붙지도 않고, 왼쪽 벽에 멀지 않은 경우(마우스가 주행경로의 가운데) flagcnt 증가
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0003 00D9 
; 0003 00DA     }
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0003 00DB 
; 0003 00DC     if(adjRightSensor < StandardSensor[2]) //오른쪽 벽이 존재하지 않을 경우
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0003 00DD     {
; 0003 00DE         if(adjLeftSensor < CenterStandardSensor[1]) // 왼쪽 벽이 멀 경우
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0003 00DF         {
; 0003 00E0             vel_counter_high_L-=2;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0003 00E1             vel_counter_high_R+=1;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0003 00E2             if(vel_counter_high_R > vel_counter_high+20)
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0003 00E3                 vel_counter_high_R = vel_counter_high+20;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0003 00E4             if(vel_counter_high_L < (vel_counter_high-20))
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0003 00E5                 vel_counter_high_L = (vel_counter_high-20);
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0003 00E6             //왼쪽 벽이 멀 경우에 오른쪽 모터의 속도를 높이고 왼쪽 모터의 속도를 줄여서 주행경로의 가운데에 마우스가 위치하도록 한다.
; 0003 00E7         }
;PCODE: $000001B7 VOL: 0
; 0003 00E8         if(adjLeftSensor > CenterStandardSensor[1])  //마우스가 왼쪽 벽에 너무 가까이 붙은 경우
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0003 00E9         {
; 0003 00EA         vel_counter_high_L+=1;
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0003 00EB         vel_counter_high_R-=2;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0003 00EC         if(vel_counter_high_L > vel_counter_high+20)
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0003 00ED             vel_counter_high_L = vel_counter_high+20;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0003 00EE         if(vel_counter_high_R < vel_counter_high-20)
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0003 00EF             vel_counter_high_R = vel_counter_high-20;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0003 00F0         //왼쪽모터의 속도를 높이고 오른쪽 모터의 속도를 줄여서 주행경로의 가운데에 마우스가 위치하도록 한다.
; 0003 00F1         }
;PCODE: $000001D3 VOL: 0
; 0003 00F2     }
;PCODE: $000001D4 VOL: 0
; 0003 00F3 
; 0003 00F4      if(adjLeftSensor < StandardSensor[2]) //왼쪽 벽이 존재하지 않을 경우
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0003 00F5      {
; 0003 00F6            if(adjRightSensor < CenterStandardSensor[2]) // 오른쪽 벽이 멀 경우
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0003 00F7         {
; 0003 00F8             vel_counter_high_L+=1;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0003 00F9             vel_counter_high_R-=2;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0003 00FA             if(vel_counter_high_L > vel_counter_high+20)
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0003 00FB                 vel_counter_high_L = vel_counter_high+20;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0003 00FC             if(vel_counter_high_R < vel_counter_high-20)
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0003 00FD                 vel_counter_high_R = vel_counter_high-20;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0003 00FE             //왼쪽모터의 속도를 높이고 오른쪽 모터의 속도를 줄여서 주행경로의 가운데에 마우스가 위치하도록 한다.
; 0003 00FF         }
;PCODE: $000001F5 VOL: 0
; 0003 0100         if(adjRightSensor > CenterStandardSensor[2])  //미로 주행 중 오른 쪽 벽에 너무 가까이 붙었을 경우
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0003 0101          {
; 0003 0102         vel_counter_high_L-=2;
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0003 0103         vel_counter_high_R+=1;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0003 0104         if(vel_counter_high_R > vel_counter_high+20)
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0003 0105             vel_counter_high_R = vel_counter_high+20;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0003 0106         if(vel_counter_high_L < (vel_counter_high-20))
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0003 0107             vel_counter_high_L = (vel_counter_high-20);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0003 0108         //왼쪽 모터의 속도를 줄이고 오른쪽 모터의 속도를 높여서 오른쪽 벽에서 멀어지도록 하였다.
; 0003 0109         }
;PCODE: $00000211 VOL: 0
; 0003 010A 
; 0003 010B      }
;PCODE: $00000212 VOL: 0
; 0003 010C 
; 0003 010D     if(adjflagcnt == 2)
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0003 010E     {       // 속도 동일하게
; 0003 010F         vel_counter_high_L = vel_counter_high;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0003 0110         vel_counter_high_R = vel_counter_high;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0003 0111     }
; 0003 0112     return 0;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0003 0113 }
;PCODE: $00000220 VOL: 0
;
;void InitializeStepmotor(void)
; 0003 0116 {
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0003 0117 	double distance4perStep;
; 0003 0118     double distance4perStep_smooth;
; 0003 0119 
; 0003 011A // LEFT MOTOR - PORTD 4,5,6,7
; 0003 011B      PORTD&=0x0F;
;PCODE: $00000223 VOL: 0
;	distance4perStep -> Y+4
;	distance4perStep_smooth -> Y+0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0003 011C      DDRD|=0xF0;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0003 011D 
; 0003 011E // RIGHT MOTOR - PORTE 4,5,6,7
; 0003 011F      PORTE&=0x0F;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0003 0120      DDRE|=0xF0;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0003 0121 
; 0003 0122 // Timer/Counter 1 initialization
; 0003 0123 // Clock source: System Clock
; 0003 0124 // Clock value: 62.500 kHz
; 0003 0125 // Mode: Normal top=FFFFh
; 0003 0126 // OC1A output: Discon.
; 0003 0127 // OC1B output: Discon.
; 0003 0128 // OC1C output: Discon.
; 0003 0129 // Noise Canceler: Off
; 0003 012A // Input Capture on Falling Edge
; 0003 012B // Timer 1 Overflow Interrupt: On
; 0003 012C // Input Capture Interrupt: Off
; 0003 012D // Compare A Match Interrupt: Off
; 0003 012E // Compare B Match Interrupt: Off
; 0003 012F // Compare C Match Interrupt: Off
; 0003 0130      TCCR1A=0x00;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0003 0131      TCCR1B=0x04;
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0003 0132      TCNT1H=0x00;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0003 0133      TCNT1L=0x00;
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0003 0134      ICR1H=0x00;
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0003 0135      ICR1L=0x00;
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0003 0136      OCR1AH=0x00;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0003 0137      OCR1AL=0x00;
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0003 0138      OCR1BH=0x00;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0003 0139      OCR1BL=0x00;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0003 013A      OCR1CH=0x00;
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0003 013B      OCR1CL=0x00;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0003 013C 
; 0003 013D // Timer/Counter 3 initialization
; 0003 013E // Clock source: System Clock
; 0003 013F // Clock value: 62.500 kHz
; 0003 0140 // Mode: Normal top=FFFFh
; 0003 0141 // OC3A output: Discon.
; 0003 0142 // OC3B output: Discon.
; 0003 0143 // OC3C output: Discon.
; 0003 0144 // Noise Canceler: Off
; 0003 0145 // Input Capture on Falling Edge
; 0003 0146 // Timer 3 Overflow Interrupt: On
; 0003 0147 // Input Capture Interrupt: Off
; 0003 0148 // Compare A Match Interrupt: Off
; 0003 0149 // Compare B Match Interrupt: Off
; 0003 014A // Compare C Match Interrupt: Off
; 0003 014B      TCCR3A=0x00;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0003 014C      TCCR3B=0x04;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0003 014D      TCNT3H=0x00;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0003 014E      TCNT3L=0x00;
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0003 014F      ICR3H=0x00;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0003 0150      ICR3L=0x00;
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0003 0151      OCR3AH=0x00;
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0003 0152      OCR3AL=0x00;
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0003 0153      OCR3BH=0x00;
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0003 0154      OCR3BL=0x00;
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0003 0155      OCR3CH=0x00;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0003 0156      OCR3CL=0x00;
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0003 0157 
; 0003 0158 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0003 0159      TIMSK=0x04;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0003 015A      ETIMSK=0x04;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0003 015B 
; 0003 015C 	LeftstepCount = 0;
;PCODE: $00000264 VOL: 0
; 0003 015D     RightstepCount = 0;
;PCODE: $00000265 VOL: 0
; 0003 015E     vel_counter_high = 65400;
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0003 015F     VelocityLeftmotorTCNT1 = vel_counter_high;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0003 0160     VelocityRightmotorTCNT3 = vel_counter_high;
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0003 0161 // LEFT MOTOR - PORTD 4,5,6,7
; 0003 0162 	PORTD&=0x0F;
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0003 0163 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0003 0164 	TIMSK=0x04;
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0003 0165 	ETIMSK=0x04;
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0003 0166 
; 0003 0167 	distance4perStep = (double)(PI * TIRE_RAD / (double)MOTOR_STEP);
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0003 0168     distance4perStep_smooth = (double)(PI * TIRE_RAD2 / (double)MOTOR_STEP);
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0003 0169 
; 0003 016A 	Information.nStep4perBlock = (int)((double)185. / distance4perStep);
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0003 016B 	Information.nStep4Turn90forRight = (int)((PI*MOUSE_WIDTH/3.55)/distance4perStep);
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0003 016C 	Information.nStep4Turn90forLeft = (int)((PI*MOUSE_WIDTH/3.85)/distance4perStep);
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0003 016D     Information.nStep4Turn90_smooth = (int)((PI*MOUSE_WIDTH/3.85)/distance4perStep_smooth);
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0003 016E }
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;
;void Direction(int mode)
; 0003 0171 {
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0003 0172      int LStepCount = 0, RStepCount = 0;
; 0003 0173 
; 0003 0174      TCCR1B = 0x04;
;PCODE: $00000293 VOL: 0
;	mode -> Y+4
;	LStepCount -> R16,R17
;	RStepCount -> R18,R19
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0003 0175      TCCR3B = 0x04;
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0003 0176 
; 0003 0177      direction_control = mode;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0003 0178 
; 0003 0179      Flag.LmotorRun = FALSE;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0003 017A      Flag.RmotorRun = FALSE;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0003 017B 
; 0003 017C      switch(mode)
;PCODE: $000002A3 VOL: 0
; 0003 017D      {
; 0003 017E      case FORWARD:
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0003 017F           while(LStepCount<Information.nStep4perBlock || RStepCount<Information.nStep4perBlock)
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0003 0180           {
; 0003 0181               adjustmouse();  // 직진으로 진행하며 좌우 보정을 진행해야 하기에 코드 첫 부분에 삽입했다.
;PCODE: $000002AF VOL: 0
; 0003 0182               VelocityLeftmotorTCNT1=vel_counter_high_L;
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0003 0183               VelocityRightmotorTCNT3=vel_counter_high_R;
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0003 0184                if(Flag.LmotorRun)
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0003 0185                {
; 0003 0186                     LStepCount++;
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0003 0187                     Flag.LmotorRun = FALSE;
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0003 0188                }
; 0003 0189                if(Flag.RmotorRun)
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0003 018A                {
; 0003 018B                     RStepCount++;
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0003 018C                     Flag.RmotorRun = FALSE;
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0003 018D                }
; 0003 018E           }
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0003 018F           break;
;PCODE: $000002C8 VOL: 0
; 0003 0190      case HALF:
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0003 0191           while(LStepCount<(Information.nStep4perBlock>>1) || RStepCount<(Information.nStep4perBlock>>1))
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0003 0192           {
; 0003 0193                if(readSensor(FRONT_SENSOR)>=CenterStandardSensor[0])
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0003 0194                break;   // 오차가 누적되어 전방에 벽이 있을 경우 바로 멈추게 함.
;PCODE: $000002DD VOL: 0
; 0003 0195 
; 0003 0196                if(Flag.LmotorRun || Flag.RmotorRun)
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0003 0197                {    // Step이 진행될 때 마다 보정이 진행되게끔 한다.
; 0003 0198                     vel_counter_high_L= VelocityLeftmotorTCNT1;
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0003 0199                     vel_counter_high_R =VelocityRightmotorTCNT3;
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0003 019A                     adjustmouse_Super();
;PCODE: $000002EC VOL: 0
; 0003 019B                     VelocityLeftmotorTCNT1 =  vel_counter_high_L;
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0003 019C                     VelocityRightmotorTCNT3 = vel_counter_high_R;
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0003 019D                }
; 0003 019E 
; 0003 019F 
; 0003 01A0                if(Flag.LmotorRun)
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0003 01A1                {
; 0003 01A2                     LStepCount++;
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0003 01A3                     Flag.LmotorRun = FALSE;
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0003 01A4                }
; 0003 01A5                if(Flag.RmotorRun)
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0003 01A6                {
; 0003 01A7                     RStepCount++;
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0003 01A8                     Flag.RmotorRun = FALSE;
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0003 01A9                }
; 0003 01AA           }
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0003 01AB           break;
;PCODE: $00000306 VOL: 0
; 0003 01AC 
; 0003 01AD      case Quarter:
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0003 01AE           while(LStepCount<((Information.nStep4perBlock>>2)) || RStepCount<((Information.nStep4perBlock>>2)))
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0003 01AF           {
; 0003 01B0                if(readSensor(FRONT_SENSOR)>=CenterStandardSensor[0])
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0003 01B1                break;   // 오차가 누적되어 전방에 벽이 있을 경우 바로 멈추게 함.
;PCODE: $0000031B VOL: 0
; 0003 01B2 
; 0003 01B3                if(Flag.LmotorRun || Flag.RmotorRun)
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0003 01B4                {    // Step이 진행될 때 마다 보정이 진행되게끔 한다.
; 0003 01B5                     vel_counter_high_L = VelocityLeftmotorTCNT1;
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0003 01B6                     vel_counter_high_R = VelocityRightmotorTCNT3;
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0003 01B7                     adjustmouse_Super();
;PCODE: $0000032A VOL: 0
; 0003 01B8                     VelocityLeftmotorTCNT1 =  vel_counter_high_L;
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0003 01B9                     VelocityRightmotorTCNT3 = vel_counter_high_R;
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0003 01BA                }
; 0003 01BB 
; 0003 01BC                if(Flag.LmotorRun)
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0003 01BD                {
; 0003 01BE                     LStepCount++;
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0003 01BF                     Flag.LmotorRun = FALSE;
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0003 01C0                }
; 0003 01C1                if(Flag.RmotorRun)
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0003 01C2                {
; 0003 01C3                     RStepCount++;
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0003 01C4                     Flag.RmotorRun = FALSE;
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0003 01C5                }
; 0003 01C6           }
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0003 01C7           break;
;PCODE: $00000344 VOL: 0
; 0003 01C8 
; 0003 01C9      case HexaStep:
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0003 01CA           while(LStepCount<(Information.nStep4perBlock>>3) || RStepCount<(Information.nStep4perBlock>>3))
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0003 01CB           {
; 0003 01CC            //   adjustmouse_Super();  // 보정 함수는 앞으로 가면서 보정을 하기 때문에 삽입한다.
; 0003 01CD            //   VelocityLeftmotorTCNT1=vel_counter_high_L;
; 0003 01CE            //   VelocityRightmotorTCNT3=vel_counter_high_R;
; 0003 01CF 
; 0003 01D0                if(readSensor(FRONT_SENSOR)>=CenterStandardSensor[0])
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0003 01D1                break;                                                 //전방 보정 : 전방에 벽 있는 경우 정지
;PCODE: $00000359 VOL: 0
; 0003 01D2 
; 0003 01D3                if(Flag.LmotorRun || Flag.RmotorRun)
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0003 01D4                {
; 0003 01D5                     vel_counter_high_L= VelocityLeftmotorTCNT1;
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0003 01D6                     vel_counter_high_R =VelocityRightmotorTCNT3;
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0003 01D7                     adjustmouse_Super();                                  //마우스 자세 보정
;PCODE: $00000368 VOL: 0
; 0003 01D8                     VelocityLeftmotorTCNT1 =  vel_counter_high_L;
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0003 01D9                     VelocityRightmotorTCNT3 = vel_counter_high_R;
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0003 01DA                }
; 0003 01DB 
; 0003 01DC                if(Flag.LmotorRun)
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0003 01DD                {
; 0003 01DE                     LStepCount++;
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0003 01DF                     Flag.LmotorRun = FALSE;
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0003 01E0                }
; 0003 01E1                if(Flag.RmotorRun)
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0003 01E2                {
; 0003 01E3                     RStepCount++;
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0003 01E4                     Flag.RmotorRun = FALSE;
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 0003 01E5                }
; 0003 01E6           }
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0003 01E7           break;
;PCODE: $00000382 VOL: 0
; 0003 01E8 
; 0003 01E9      case SmoothR:
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0003 01EA      case SmoothL:
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
; 0003 01EB           while(RStepCount<Information.nStep4Turn90_smooth || LStepCount<Information.nStep4Turn90_smooth)
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0003 01EC           {
; 0003 01ED             if(Flag.LmotorRun)
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0003 01EE             {
; 0003 01EF                 LStepCount++;
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0003 01F0                 Flag.LmotorRun = FALSE;
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0003 01F1             }
; 0003 01F2 
; 0003 01F3             if(Flag.RmotorRun)
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0003 01F4             {
; 0003 01F5                 RStepCount++;
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0003 01F6                 Flag.RmotorRun = FALSE;
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0003 01F7             }
; 0003 01F8           }
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0003 01F9           break;
;PCODE: $000003AA VOL: 0
; 0003 01FA      case LEFT:
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0003 01FB      case RIGHT:
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
; 0003 01FC           while(LStepCount<Information.nStep4Turn90forLeft || RStepCount<Information.nStep4Turn90forRight)
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0003 01FD           {
; 0003 01FE                if(Flag.LmotorRun)
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
; 0003 01FF                {
; 0003 0200                     LStepCount++;
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
; 0003 0201                     Flag.LmotorRun = FALSE;
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
; 0003 0202                }
; 0003 0203                if(Flag.RmotorRun)
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
; 0003 0204                {
; 0003 0205                     RStepCount++;
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0003 0206                     Flag.RmotorRun = FALSE;
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
; 0003 0207                }
; 0003 0208           }
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
; 0003 0209           break;
;PCODE: $000003D2 VOL: 0
; 0003 020A      case BACK:
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0003 020B           while(LStepCount<(Information.nStep4Turn90_smooth*2) || RStepCount<(Information.nStep4Turn90_smooth*2))
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0003 020C           {
; 0003 020D                if(Flag.LmotorRun)
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0003 020E                {
; 0003 020F                     LStepCount++;
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 0003 0210                     Flag.LmotorRun = FALSE;
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
; 0003 0211                }
; 0003 0212                if(Flag.RmotorRun)
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0003 0213                {
; 0003 0214                     RStepCount++;
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
; 0003 0215                     Flag.RmotorRun = FALSE;
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
; 0003 0216                }
; 0003 0217           }
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
; 0003 0218           break;
;PCODE: $000003F5 VOL: 0
; 0003 0219      }
;PCODE: $000003F6 VOL: 0
; 0003 021A      TCCR1B = 0x00;
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
; 0003 021B      TCCR3B = 0x00;
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
; 0003 021C }
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;
;// Timer 1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0003 0220 {
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0003 0221 // Place your code here
; 0003 0222      switch(direction_control)
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
; 0003 0223      {
; 0003 0224           case LEFT:
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0003 0225                PORTD |= (rotateL[LeftstepCount]<<4);
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
; 0003 0226                PORTD &= ((rotateL[LeftstepCount]<<4)+0x0f);
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0003 0227                LeftstepCount--;
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0003 0228                if(LeftstepCount < 0)
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
; 0003 0229                     LeftstepCount = sizeof(rotateL)-1;
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0003 022A                break;
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
; 0003 022B           case RIGHT:
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
; 0003 022C           case BACK:
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
; 0003 022D           case Quarter:
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
; 0003 022E           case ACCEL:
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0003 022F           case FORWARD:
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
; 0003 0230           case HALF:
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0003 0231           case SmoothR:
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
; 0003 0232                PORTD |= (rotateL[LeftstepCount]<<4);
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
; 0003 0233                PORTD &= ((rotateL[LeftstepCount]<<4)+0x0f);
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0003 0234                LeftstepCount++;
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0003 0235                LeftstepCount %= sizeof(rotateL);
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0003 0236                break;
;PCODE: $00000458 VOL: 0
; 0003 0237           case SmoothL:
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
; 0003 0238           break;
;PCODE: $0000045C VOL: 0
; 0003 0239      }
;PCODE: $0000045D VOL: 0
; 0003 023A      Flag.LmotorRun = TRUE;
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
; 0003 023B 
; 0003 023C      TCNT1H = VelocityLeftmotorTCNT1 >> 8;
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
; 0003 023D      TCNT1L = VelocityLeftmotorTCNT1 & 0xff;
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
; 0003 023E }
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;
;// Timer 3 overflow interrupt service routine
;interrupt [TIM3_OVF] void timer3_ovf_isr(void)
; 0003 0242 {
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
; 0003 0243 // Place your code here
; 0003 0244      switch(direction_control)
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0003 0245      {
; 0003 0246           case RIGHT:
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
; 0003 0247           case BACK:
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
; 0003 0248                PORTE |= (rotateR[RightstepCount]<<4);
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
; 0003 0249                PORTE &= ((rotateR[RightstepCount]<<4)+0x0f);
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
; 0003 024A                RightstepCount--;
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0003 024B                if(RightstepCount < 0)
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
; 0003 024C                     RightstepCount = sizeof(rotateR)-1;
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
; 0003 024D                break;
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
; 0003 024E           case ACCEL:
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
; 0003 024F           case FORWARD:
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
; 0003 0250           case HALF:
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0003 0251           case Quarter:
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
; 0003 0252           case LEFT:
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0003 0253           case SmoothL:
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
; 0003 0254                PORTE |= (rotateR[RightstepCount]<<4);
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
; 0003 0255                PORTE &= ((rotateR[RightstepCount]<<4)+0x0f);
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
; 0003 0256                RightstepCount++;
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
; 0003 0257                RightstepCount %= sizeof(rotateR);
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0003 0258                break;
;PCODE: $000004C2 VOL: 0
; 0003 0259           case SmoothR:
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
; 0003 025A           break;
;PCODE: $000004C6 VOL: 0
; 0003 025B      }
;PCODE: $000004C7 VOL: 0
; 0003 025C      Flag.RmotorRun = TRUE;
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
; 0003 025D 
; 0003 025E      TCNT3H = VelocityRightmotorTCNT3 >> 8;
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
; 0003 025F      TCNT3L = VelocityRightmotorTCNT3 & 0xff;
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
; 0003 0260 }
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
