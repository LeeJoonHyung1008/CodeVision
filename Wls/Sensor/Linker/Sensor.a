;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include "Sensor.h"
;
;void InitializeSensor(void)
; 0000 0009 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000A      // ¹ß±¤¼¾¼­ PORTB 5,6,7
; 0000 000B      PORTB &= 0x1f;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 000C      DDRB |= 0xe0;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 000D      // ¼ö±¤¼¾¼­ PORTF 0,1,2
; 0000 000E      PORTF &= 0xf8;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 000F      DDRF &= 0xf8;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0010 
; 0000 0011 // ADC initialization
; 0000 0012 // ADC Clock frequency: 125.000 kHz
; 0000 0013 // ADC Voltage Reference: AVCC pin
; 0000 0014      ADMUX=ADC_VREF_TYPE;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0015      ADCSRA=0x87;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0016 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;unsigned int read_adc(unsigned char adc_input)
; 0000 0019 {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 001A     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 001B     // Delay needed for the stabilization of the ADC input voltage
; 0000 001C     delay_us(10);
;PCODE: $00000026 VOL: 0
; 0000 001D     // Start the AD conversion
; 0000 001E     ADCSRA|=0x40;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 001F     // Wait for the AD conversion to complete
; 0000 0020     while ((ADCSRA & 0x10)==0);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0021     ADCSRA|=0x10;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0022     return ADCW;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0023 }
;PCODE: $00000034 VOL: 0
;
;unsigned int readSensor(char si)
; 0000 0026 {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0027      unsigned int ret;
; 0000 0028 
; 0000 0029      switch(si)
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;	si -> Y+2
;	ret -> R16,R17
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 002A      {
; 0000 002B           case FRONT_SENSOR:
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 002C                PORTB.5=1;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 002D                delay_us(50);
;PCODE: $0000003F VOL: 0
; 0000 002E                ret=read_adc(si);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 002F                PORTB.5=0;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0030                break;
;PCODE: $00000046 VOL: 0
; 0000 0031           case LEFT_SENSOR:
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0032                PORTB.6=1;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0033                delay_us(50);
;PCODE: $0000004C VOL: 0
; 0000 0034                ret=read_adc(si);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0035                PORTB.6=0;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0036                break;
;PCODE: $00000053 VOL: 0
; 0000 0037           case RIGHT_SENSOR:
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0038                PORTB.7=1;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0039                delay_us(50);
;PCODE: $00000059 VOL: 0
; 0000 003A                ret=read_adc(si);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 003B                PORTB.7=0;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 003C                break;
;PCODE: $00000060 VOL: 0
; 0000 003D      }
;PCODE: $00000061 VOL: 0
; 0000 003E      return ret;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 003F }
;PCODE: $00000069 VOL: 0
